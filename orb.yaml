version: 2.1
description: |
  Golang CI jobs and commands for CircleCI.

  Source: https://github.com/dnephin/golang-orb


executors:
  golang:
    docker:
    - image: golang:<< parameters.tag >>
    environment:
      CGO_ENABLED: << parameters.cgo-enabled >>
    parameters:
      tag:
        type: string
        default: 1.13-alpine
        description: |
          Image tag for golang docker image.
          https://hub.docker.com/_/golang?tab=tags
      cgo-enabled:
        type: string
        default: '0'
        description: Value for CGO_ENABLED
  circleci-golang:
    docker:
    - image: circleci/golang:<< parameters.tag >>
    environment:
      CGO_ENABLED: << parameters.cgo-enabled >>
    parameters:
      tag:
        type: string
        default: '1.13'
        description: |
          Image tag for circleci/golang docker image.
          https://hub.docker.com/r/circleci/golang/tags
      cgo-enabled:
        type: string
        default: '1'
        description: Value for CGO_ENABLED


commands:
  install-ssh:
    steps:
      - run:
          name: "Install ssh"
          command: |
            command -v ssh && exit
            command -v apk && apk add --no-cache --no-progress openssh

  install:
    description: Install a package
    parameters:
      package:
        type: string
    steps:
      - run:
          name: "Install << parameters.package >>"
          command: |
            command -v << parameters.package >> && exit
            command -v apk && apk add --no-cache --no-progress << parameters.package >>

  mod-download:
    description: |
      DEPRECATED: use 'run: go mod download' instead.

      Previously this command would restore and update the Go module cache.
      After measuring the cache effectiveness it turned out that 'go mod download'
      is actually faster than the cache in most cache. In go1.13 'go mod download'
      became even faster due to the use of the package cache.

      This command no longer uses a cache, but remains for backwards compatibility.
    parameters:
      prefix:
        type: string
        default: v1
      path:
        type: string
        default: /go/pkg/mod
    steps:
      - install: {package: git}
      - run:
          environment:
            GO111MODULE: 'on'
          command: go mod download

  mod-tidy-check:
    description: |
      Run 'go mod tidy' and check that go.mod and go.sum remain unmodified.
      Use this command to ensure that the go module files that are commited
      are correct and tidy.
    steps:
      - install: {package: git}
      - run: go mod tidy -v
      - run:
          name: Check git diff
          command: |
            git --no-pager diff go.mod go.sum
            git --no-pager diff --quiet go.mod go.sum

  install-gotestsum:
    description: Install gotestsum
    parameters:
      version:
        type: string
        default: 0.3.5
      gobin:
        type: string
        default: /go/bin
      prefix:
        type: string
        default: v1
        description: Prefix for cache key to store the binary.
    steps:
      - restore_cache:
          name: Restore gotestsum cache
          keys: ['<< parameters.prefix >>-gotestsum-{{ arch }}-<< parameters.version >>']
      - run:
          name: Install gotestsum
          command: |
            download=https://github.com/gotestyourself/gotestsum/releases/download
            mkdir -p << parameters.gobin >>
            command -v << parameters.gobin >>/gotestsum && exit

            if command -v choco; then
              curl -sSL $download/v<< parameters.version >>/gotestsum_<< parameters.version >>_windows_amd64.tar.gz | \
                7z e -si -tgzip -so | \
                7z e -si -ttar -o<< parameters.gobin >> gotestsum.exe
              exit 0
            fi

            command -v curl || (
              command -v apk && apk add --no-cache --no-progress curl
            )

            curl -sSL $download/v<< parameters.version >>/gotestsum_<< parameters.version >>_linux_amd64.tar.gz | \
              tar -xz -C << parameters.gobin >> gotestsum
      - save_cache:
          name: Save gotestsum cache
          key: '<< parameters.prefix >>-gotestsum-{{ arch }}-<< parameters.version >>'
          paths: [<< parameters.gobin >>/gotestsum]

  install-golangci-lint:
    description: Install golangci-lint
    parameters:
      version:
        type: string
        default: 1.15.0
      gobin:
        type: string
        default: /go/bin
      prefix:
        type: string
        default: v1
        description: Prefix for cache key to store the binary.
    steps:
      - restore_cache:
          name: Restore golangci-lint cache
          keys: ['<< parameters.prefix >>-golangci-lint-{{ arch }}-<< parameters.version >>']
      - run:
          name: Install golangci-lint
          command: |
            mkdir -p << parameters.gobin >>
            command -v << parameters.gobin >>/golangci-lint && exit

            download=https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh
            wget -O- -q $download | sh -s -- -b << parameters.gobin >>/ v<< parameters.version >>
      - save_cache:
          name: Save golangci-lint cache
          key: '<< parameters.prefix >>-golangci-lint-{{ arch }}-<< parameters.version >>'
          paths: [<< parameters.gobin >>/golangci-lint]


jobs:

  test:
    description: |
      Run tests with gotestsum.
    parameters:
      executor:
        type: executor
        default: golang
      go-test-flags:
        type: string
        default: ""
        description: Flags passed to go test.
      packages:
        type: string
        default: "./..."
        description: Import paths of packages to be tested.
      test-suite-name:
        type: string
        default: unit
        description: Test suite name to report to CircleCI.
      gotestsum-format:
        type: string
        default: short
        description: gotestsum format. https://github.com/gotestyourself/gotestsum#format
      coverage:
        type: string
        default: -coverprofile=coverage.txt
        description: Coverage flag. Set to the empty string to disable.
      codecov-upload:
        type: boolean
        default: false
        description: |
          Upload coverage report to https://codecov.io/. Requires the codecov API token to be
          set as an environment variable for private projects.
    executor: << parameters.executor >>
    steps:
      - install: {package: git}
      - install-ssh
      - checkout
      - run: go mod download
      - install-gotestsum
      - run:
          name: go test
          environment:
            GOTESTSUM_JUNITFILE: /tmp/test-reports/<< parameters.test-suite-name >>/junit.xml
            GOTESTSUM_FORMAT: << parameters.gotestsum-format >>
          command: |
            mkdir -p /tmp/test-reports/<< parameters.test-suite-name >>
            /go/bin/gotestsum -- \
              << parameters.coverage >> \
              << parameters.go-test-flags >> \
              << parameters.packages >>
      - store_test_results:
          path: /tmp/test-reports
      - when:
          condition: << parameters.codecov-upload >>
          steps:
            - install: {package: bash}
            - install: {package: curl}
            - run:
                shell: /bin/bash -eo pipefail
                command: |
                  bash <(curl -s https://codecov.io/bash)

  lint:
    description: |
      Run golangci-lint.
    parameters:
      executor:
        type: executor
        default: golang
      golangci-lint-version:
        type: string
        default: 1.15.0
      concurrency:
        type: string
        default: '2'
        description: |
          Concurrency used to run linters. Defaults to 2 because NumCPU is not
          aware of container CPU limits.
    executor: << parameters.executor >>
    steps:
      - checkout
      - run: go mod download
      - install-golangci-lint:
          version: << parameters.golangci-lint-version >>
      - run:
          name: Lint
          command: |
            golangci-lint run -v \
              --concurrency << parameters.concurrency >>

  godoc:
    description: |
      Render static godoc and upload it to a remote branch. Defaults to
      uploading to the gh-pages branch for using github pages.
    parameters:
      executor:
        type: executor
        default: golang
      package:
        type: string
        description: |
          Import path to a go package in the GOPATH to render with godoc.
      target-branch:
        type: string
        default: gh-pages
        description: |
          Git branch which contains the static godoc. Set to the empty string
          to disable publishing to a branch.
    executor: << parameters.executor >>
    steps:
      - run:
          name: "Install godoc"
          command: |
            command -v apk && apk add --no-cache --no-progress wget
            command -v git || (
              command -v apk && apk add --no-cache --no-progress git
            )
            command -v ssh || (
              command -v apk && apk add --no-cache --no-progress openssh
            )
            command -v godoc || (
              go get golang.org/x/tools/cmd/godoc
            )
      - checkout
      - run: go mod download
      - run:
          name: Setup GOPATH and vendor
          command: |
            target="$GODOC/go/src/<< parameters.package >>"
            mkdir -p "$(dirname "$target")"
            ln -s "$PWD" "$target"
            go mod vendor

      - run:
          name: Run godoc
          background: true
          command: |
            cd "$GODOC/go/src/<< parameters.package >>"
            godoc -http=:6060
      - run:
          name: Crawl godoc
          command: |
            mkdir -p godoc; cd godoc
            # TODO: where is the robots.txt coming from?
            timeout -t 60 wget \
              --recursive \
              --no-parent \
              --timestamping \
              --adjust-extension \
              --page-requisites \
              --convert-links \
              --no-verbose \
              -e robots=off \
              http://localhost:6060/pkg/<< parameters.package >>
      - run:
          name: Publish to remote git branch << parameters.target-branch >>
          command: |
            if [[ -z "<< parameters.target-branch >>" ]]; then
              echo "No target-branch set"
              exit
            fi

            git config --global user.email "bot@example.com"
            git config --global user.name  "CircleCI godoc bot"

            git reset --hard HEAD

            if git checkout gh-pages; then
              git add godoc/localhost:6060/*
              git mv -f godoc/localhost:6060/* .
            else
              # Create a new gh-pages branch
              cd godoc/localhost:6060/
              git init
              git commit --allow-empty -m "init"
              git remote add origin $CIRCLE_REPOSITORY_URL
              git checkout -b gh-pages
              git add *
            fi

            git commit -a -m "Update to docs."
            git push origin gh-pages
